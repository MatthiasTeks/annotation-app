// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  projects      AnnotationProject[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model AnnotationProject {
  id            Int                    @id @default(autoincrement())
  name          String
  description   String?
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  situations    AnnotationSituation[]
  userId        String?
  user          User?                   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AnnotationSituation {
  id          Int                @id @default(autoincrement())
  name        String
  project     AnnotationProject  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   Int
  frames      AnnotationFrame[]
  comments    AnnotationComment[]
}

model AnnotationFrame {
  id          Int                @id @default(autoincrement())
  filename    String
  timestamp   DateTime
  situation   AnnotationSituation @relation(fields: [situationId], references: [id], onDelete: Cascade)
  situationId Int
  annotations Annotation[]
}

model Annotation {
  id          Int                @id @default(autoincrement())
  name        String
  posX        Float
  posY        Float
  frame       AnnotationFrame    @relation(fields: [frameId], references: [id], onDelete: Cascade)
  frameId     Int
}

model AnnotationComment {
  id          Int                @id @default(autoincrement())
  name        String
  situation   AnnotationSituation @relation(fields: [situationId], references: [id], onDelete: Cascade)
  situationId Int
}
